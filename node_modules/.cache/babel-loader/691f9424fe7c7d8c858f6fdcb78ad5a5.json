{"ast":null,"code":"var _jsxFileName = \"/home/mayankawasthi/Strangers.Things/src/components/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport LoginForm from './LoginForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegisterForm = () => {\n  _s();\n\n  const [username, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmation, setConfirmation] = useState(\"\");\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== confirmation) {\n      alert(\"Password doesn't match\");\n      setPassword(\"\");\n      setConfirmation(\"\");\n    } else {\n      const response = await fetch('https://strangers-things.herokuapp.com/api/2110-VPI-WEB-PT/users/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'Application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username: {\n              username\n            },\n            password: {\n              password\n            }\n          }\n        })\n      }).then(response => response.json()).then(result => {\n        console.log(result);\n      }).catch(console.error);\n      setUserName(\"\");\n      setPassword(\"\");\n      setConfirmation(\"\");\n    } // if (result) {\n    //     <LoginForm />\n    // } else {\n    //     console.log(\"Oops, we have an ERROR!!!\")\n    // }\n    // result ? <LoginForm /> : \"error\"; \n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Register Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: event => {\n          setUserName(event.target.value);\n        },\n        minLength: 4,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: event => {\n          setPassword(event.target.value);\n        },\n        minLength: 6,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password Confirmation\",\n        value: confirmation,\n        onChange: event => setConfirmation(event.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-Btn\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RegisterForm, \"543UYrRQu04Z3RW89T0kmnaNfhA=\");\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/home/mayankawasthi/Strangers.Things/src/components/RegisterForm.js"],"names":["React","useState","LoginForm","RegisterForm","username","setUserName","password","setPassword","confirmation","setConfirmation","handleSubmit","event","preventDefault","alert","response","fetch","method","headers","body","JSON","stringify","user","then","json","result","console","log","catch","error","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport LoginForm from './LoginForm';\r\n\r\nconst RegisterForm = () => {\r\n    const [username, setUserName] = useState(\"\"); \r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmation, setConfirmation] = useState(\"\");\r\n    \r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        if (password !== confirmation) {\r\n            alert (\"Password doesn't match\")\r\n            setPassword(\"\")\r\n            setConfirmation(\"\")\r\n        } else {\r\n            const response = await fetch('https://strangers-things.herokuapp.com/api/2110-VPI-WEB-PT/users/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type' : 'Application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    user: {\r\n                        username:{username},\r\n                        password: {password}\r\n                    }\r\n                })\r\n            }).then (response => response.json())\r\n              .then (result => {\r\n                  console.log(result);\r\n              })\r\n              .catch(console.error);\r\n            \r\n            setUserName(\"\");\r\n            setPassword(\"\");\r\n            setConfirmation(\"\");\r\n        }\r\n\r\n        // if (result) {\r\n        //     <LoginForm />\r\n        // } else {\r\n        //     console.log(\"Oops, we have an ERROR!!!\")\r\n        // }\r\n        // result ? <LoginForm /> : \"error\"; \r\n    \r\n    }\r\n    return (\r\n        <>\r\n            <h3>Register Form</h3>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <input type = \"text\" placeholder = \"Username\" value={username}\r\n                 onChange = {(event) => {setUserName(event.target.value)}}\r\n                 minLength={4} required>\r\n                </input>\r\n\r\n                <input type = \"password\" placeholder = \"Password\" value={password}\r\n                 onChange = {(event) => {setPassword(event.target.value)}}\r\n                  minLength={6} required>\r\n                </input>\r\n\r\n                <input type = \"password\" placeholder = \"Password Confirmation\" value={confirmation}\r\n                 onChange = {(event) => setConfirmation(event.target.value)}\r\n                 required>\r\n                 </input>\r\n\r\n                 <br></br>\r\n\r\n                 <button type = \"submit\" className = \"submit-Btn\">Submit</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegisterForm;"]},"metadata":{},"sourceType":"module"}